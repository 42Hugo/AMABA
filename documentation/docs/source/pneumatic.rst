Pneumatic Control Documentation
=================================

This Python module is designed to start a C subprocess that handles EtherCAT communication using the EtherLab master. Strings are transmitted through sockets from this module.

Pneumatic Class
----------------

Initialization
^^^^^^^^^^^^^^
.. automethod:: pneumatic_control.Pneumatic.__init__

The following variables define the pneumatic states in the ``__init__(self)`` method:
 - **cart**: Represents the pressure applied to the liquid.
 - **ato**: Controls the pressure for spraying the liquid.
 - **point**: Manages the pressure that opens or closes the nozzle.

The following variables are used:
 - **st**: Represents the state of the pressure control, set to 1 to open the solenoid valve (``st_cart``, ``st_ato``, ``st_point``).
 - **c**: Controls the pressure, ranging between 0 and 2 bar (``c_cart``, ``c_ato``).

.. note::
    There is no control command for **point** (c_point) as it maintains a fixed pressure between 4.7 and 7 bar.

The **host** and **port** are configured to send data through the sockets.

The **connected** variable indicates whether communication with the subprocess is established (``self.connected = 2`` when running).

The ``self.start_connection()`` method attempts to execute two functions:
 - ``self.start_c_program()``
 - ``self.start_socket()``

Connection Methods
^^^^^^^^^^^^^^^^^^
.. code-block:: python

    self.process = subprocess.Popen(['/home/amaba/Desktop/dev_ws/ighEthercat/ethercat/examples/user/ec_user_example'], stdin=subprocess.PIPE)

The path to the `ec_user_example` executable might need to be adjusted. It is generated by `main.c` and handles communication using the EtherCAT protocol.

Disconnect Methods
^^^^^^^^^^^^^^^^^^
.. code-block:: python

    def stop_c_program(self):
        # Terminate the C program
        self.process.terminate()
        self.process.wait()
        self.client.close()  

This method stops both the C process and the socket communication.

Send Methods
^^^^^^^^^^^^^
.. automethod:: pneumatic_control.Pneumatic.sendToClient

The argument ``state`` is always set to 1, except when terminating the process, in which case it sets all pressures to 0 and stops the loop. This method gathers all pressure-related information and sends it to the C process in the appropriate string format. The string format is as follows:

 - The first bit indicates the state (1 or 0). A state of 0 will automatically terminate the loop.
 - Bits 2, 3, and 4 are for the solenoid valve: 0 for closed, 1 for open.
 - Bits 5, 6, 7, and 8 represent the pressure values (between 0 and 2) for atomization and fluid, without a comma.

The string should look like this:
mes = [state][on/off atomization][on/off fluid][on/off nozzle][pressure atomization between 0 and 20][pressure fluid between 0 and 20]

.. code-block:: python

    mes = '10001103'
    
Example:
 - The state is on.
 - All three solenoids are closed.
 - 1.1 bar for atomization.
 - 0.3 bar for fluid.

Stop Method
^^^^^^^^^^^^
.. automethod:: pneumatic_control.Pneumatic.stop_print

If the print process is stopped but there is no need to terminate the C process, this method will turn off all solenoids and send an update.
